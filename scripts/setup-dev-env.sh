#!/bin/bash
# setup-dev-env.sh - Script to set up development environment for NIVAI project
# This script configures environment variables and mounts for local development

# Exit on error
set -e

# Configuration - Replace with your actual values or use a .env file
AZURE_STORAGE_ACCOUNT_NAME=${AZURE_STORAGE_ACCOUNT_NAME:-"nivaistorage"}
AZURE_STORAGE_ACCOUNT_KEY=${AZURE_STORAGE_ACCOUNT_KEY:-"your-storage-account-key"}
AZURE_FILESHARE_NAME=${AZURE_FILESHARE_NAME:-"nivai-data"}
EXTERNAL_DATA_MOUNT=${EXTERNAL_DATA_MOUNT:-"/mnt/nivai-data"}
RESOURCE_GROUP=${RESOURCE_GROUP:-"nivai-resources"}

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}Setting up NIVAI development environment...${NC}"

# Check if running with sudo
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Please run this script with sudo to mount the Azure file share${NC}"
  exit 1
fi

# Create mount directory if it doesn't exist
if [ ! -d "$EXTERNAL_DATA_MOUNT" ]; then
  echo -e "${YELLOW}Creating mount directory: $EXTERNAL_DATA_MOUNT${NC}"
  mkdir -p "$EXTERNAL_DATA_MOUNT"
fi

# Install dependencies if needed
echo -e "${YELLOW}Checking for required dependencies...${NC}"
if ! command -v cifs-utils &> /dev/null; then
  echo -e "${YELLOW}Installing cifs-utils...${NC}"
  apt-get update && apt-get install -y cifs-utils
fi

# Mount the Azure file share
echo -e "${YELLOW}Mounting Azure file share...${NC}"

# Create credentials file securely
CREDS_FILE="/root/.smbcredentials_nivai"
echo "username=$AZURE_STORAGE_ACCOUNT_NAME" > "$CREDS_FILE"
echo "password=$AZURE_STORAGE_ACCOUNT_KEY" >> "$CREDS_FILE"
chmod 600 "$CREDS_FILE"

# Unmount if already mounted
if grep -qs "$EXTERNAL_DATA_MOUNT" /proc/mounts; then
  echo -e "${YELLOW}Unmounting existing file share...${NC}"
  umount -f "$EXTERNAL_DATA_MOUNT" || true
fi

# Mount the share
mount -t cifs "//$AZURE_STORAGE_ACCOUNT_NAME.file.core.windows.net/$AZURE_FILESHARE_NAME" "$EXTERNAL_DATA_MOUNT" \
  -o credentials="$CREDS_FILE",serverino,nosharesock,actimeo=30

# Check if mount was successful
if grep -qs "$EXTERNAL_DATA_MOUNT" /proc/mounts; then
  echo -e "${GREEN}Successfully mounted Azure file share to $EXTERNAL_DATA_MOUNT${NC}"
else
  echo -e "${RED}Failed to mount Azure file share${NC}"
  exit 1
fi

# Create an .env file for the application
ENV_FILE="$(dirname "$0")/../.env"
echo -e "${YELLOW}Creating .env file at $ENV_FILE${NC}"

cat > "$ENV_FILE" << EOF
# NIVAI Environment Configuration
# Generated by setup-dev-env.sh

# External Data Storage Configuration
EXTERNAL_DATA_PATH=$EXTERNAL_DATA_MOUNT
AZURE_STORAGE_ACCOUNT=$AZURE_STORAGE_ACCOUNT_NAME
AZURE_STORAGE_KEY=$AZURE_STORAGE_ACCOUNT_KEY
AZURE_FILESHARE_NAME=$AZURE_FILESHARE_NAME
AZURE_RESOURCE_GROUP=$RESOURCE_GROUP

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_USER=nivai
DB_PASSWORD=developmentpassword
DB_NAME=nivai

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379

# Server Configuration
SERVER_PORT=8080
EOF

# Set ownership to the current user (non-sudo)
if [ -n "$SUDO_USER" ]; then
  chown "$SUDO_USER:$(id -g "$SUDO_USER")" "$ENV_FILE"
fi

echo -e "${GREEN}Environment setup complete!${NC}"
echo -e "${GREEN}File share mounted at: $EXTERNAL_DATA_MOUNT${NC}"
echo -e "${GREEN}Environment variables saved to: $ENV_FILE${NC}"
echo -e "${YELLOW}You can now start the application with:${NC}"
echo -e "  cd $(dirname "$0")/.."
echo -e "  docker compose up -d${NC}"
echo -e "${YELLOW}Or run directly:${NC}"
echo -e "  cd $(dirname "$0")/../backend"
echo -e "  go run cmd/api/main.go${NC}"