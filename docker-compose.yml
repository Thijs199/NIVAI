services:
  frontend:
    build:
      context: .
      dockerfile: ./infrastructure/docker/frontend.Dockerfile
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://backend:8080/api/v1
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: ./infrastructure/docker/backend.Dockerfile
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      PYTHON_API_URL: http://python-api:8081
      EXTERNAL_DATA_MOUNT: /data/shared
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      GIN_MODE: release
      CONFIG_PATH: /app/config.json
      DB_HOST: postgres-db
      DB_USER: admin
      DB_PASSWORD: adminpass
      DB_NAME: mydatabase
      DB_SSL_MODE: disable
      REDIS_HOST: redis-db
      REDIS_PORT: 6379
    volumes:
      - shared_data:/data/shared
    depends_on:
      - python-api
      - postgres-db
      - redis-db

  python-api:
    build:
      context: ./python_api
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    restart: unless-stopped
    volumes:
      - shared_data:/data/shared # This volume is crucial for local storage mode
    environment:
      PYTHONUNBUFFERED: 1
      STORAGE_TYPE: "local"  # Default to local for docker-compose shared volume setup
      PYTHON_API_DATA_PATH: "/data/shared" # Corresponds to the volume mount
      # AZURE_STORAGE_CONNECTION_STRING: ${AZURE_STORAGE_CONNECTION_STRING} # Uncomment and set in .env if using Azure
      # AZURE_STORAGE_CONTAINER_NAME: ${AZURE_STORAGE_CONTAINER_NAME}    # Uncomment and set in .env if using Azure

  postgres-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=adminpass
      - POSTGRES_DB=mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis-db:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  shared_data: {}
  postgres_data: {}
  redis_data: {}
